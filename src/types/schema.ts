// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Factory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Factory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Factory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Factory", id.toString(), this);
  }

  static load(id: string): Factory | null {
    return store.get("Factory", id) as Factory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalModules(): BigInt | null {
    let value = this.get("totalModules");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalModules(value: BigInt | null) {
    if (value === null) {
      this.unset("totalModules");
    } else {
      this.set("totalModules", Value.fromBigInt(value as BigInt));
    }
  }

  get totalInstallations(): BigInt | null {
    let value = this.get("totalInstallations");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalInstallations(value: BigInt | null) {
    if (value === null) {
      this.unset("totalInstallations");
    } else {
      this.set("totalInstallations", Value.fromBigInt(value as BigInt));
    }
  }

  get totalBaseContracts(): BigInt | null {
    let value = this.get("totalBaseContracts");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalBaseContracts(value: BigInt | null) {
    if (value === null) {
      this.unset("totalBaseContracts");
    } else {
      this.set("totalBaseContracts", Value.fromBigInt(value as BigInt));
    }
  }
}

export class BaseContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BaseContract entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BaseContract entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BaseContract", id.toString(), this);
  }

  static load(id: string): BaseContract | null {
    return store.get("BaseContract", id) as BaseContract | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get modules(): Array<string> | null {
    let value = this.get("modules");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set modules(value: Array<string> | null) {
    if (value === null) {
      this.unset("modules");
    } else {
      this.set("modules", Value.fromStringArray(value as Array<string>));
    }
  }

  get users(): Array<string> | null {
    let value = this.get("users");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set users(value: Array<string> | null) {
    if (value === null) {
      this.unset("users");
    } else {
      this.set("users", Value.fromStringArray(value as Array<string>));
    }
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get base_contracts(): Array<string> | null {
    let value = this.get("base_contracts");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set base_contracts(value: Array<string> | null) {
    if (value === null) {
      this.unset("base_contracts");
    } else {
      this.set("base_contracts", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class UserBaseContracts extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserBaseContracts entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserBaseContracts entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserBaseContracts", id.toString(), this);
  }

  static load(id: string): UserBaseContracts | null {
    return store.get("UserBaseContracts", id) as UserBaseContracts | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get role_id(): i32 {
    let value = this.get("role_id");
    return value.toI32();
  }

  set role_id(value: i32) {
    this.set("role_id", Value.fromI32(value));
  }

  get base_contract(): Array<string> | null {
    let value = this.get("base_contract");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set base_contract(value: Array<string> | null) {
    if (value === null) {
      this.unset("base_contract");
    } else {
      this.set("base_contract", Value.fromStringArray(value as Array<string>));
    }
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }
}

export class Module extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Module entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Module entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Module", id.toString(), this);
  }

  static load(id: string): Module | null {
    return store.get("Module", id) as Module | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    return value.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get moduleAddress(): string {
    let value = this.get("moduleAddress");
    return value.toString();
  }

  set moduleAddress(value: string) {
    this.set("moduleAddress", Value.fromString(value));
  }

  get publisher(): string {
    let value = this.get("publisher");
    return value.toString();
  }

  set publisher(value: string) {
    this.set("publisher", Value.fromString(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get abi(): string {
    let value = this.get("abi");
    return value.toString();
  }

  set abi(value: string) {
    this.set("abi", Value.fromString(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get active_install(): BigInt {
    let value = this.get("active_install");
    return value.toBigInt();
  }

  set active_install(value: BigInt) {
    this.set("active_install", Value.fromBigInt(value));
  }

  get rating(): i32 {
    let value = this.get("rating");
    return value.toI32();
  }

  set rating(value: i32) {
    this.set("rating", Value.fromI32(value));
  }

  get total_reviews(): BigInt {
    let value = this.get("total_reviews");
    return value.toBigInt();
  }

  set total_reviews(value: BigInt) {
    this.set("total_reviews", Value.fromBigInt(value));
  }

  get metaDetails(): string {
    let value = this.get("metaDetails");
    return value.toString();
  }

  set metaDetails(value: string) {
    this.set("metaDetails", Value.fromString(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }
}
